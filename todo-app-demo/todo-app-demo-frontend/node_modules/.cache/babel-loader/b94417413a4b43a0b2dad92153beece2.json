{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Komputer\\\\Desktop\\\\Komputer\\\\Projects\\\\todo-app-demo\\\\todo-app-demo\\\\src\\\\components\\\\TodoItem.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst TodoItem = props => {\n  _s();\n\n  const [todoItem, setTodoItem] = useState(props.data);\n  const [isDirty, setDirty] = useState(false);\n  useEffect(() => {\n    if (isDirty) {\n      fetch(`http://localhost:8080/api/todoItems/${todoItem.id}`, {\n        method: 'PUT',\n        headers: {\n          'content-type': 'application/json'\n        },\n        body: JSON.stringify(todoItem)\n      }).then(response => response.json()).then(data => {\n        setDirty(false);\n        setTodoItem(data);\n      });\n      console.log(\"todo item changed\", todoItem);\n    }\n  }, [todoItem, isDirty]);\n\n  function updateIsDone() {\n    setDirty(true);\n    setTodoItem({ ...todoItem,\n      isDone: !todoItem.isDone\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"checkbox\",\n      checked: todoItem.isDone,\n      onChange: updateIsDone\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      children: todoItem.task\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 39\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TodoItem, \"Lsg9B8STateHsHm9WiJAcTpeEtw=\");\n\n_c = TodoItem;\nexport default TodoItem;\n\nvar _c;\n\n$RefreshReg$(_c, \"TodoItem\");","map":{"version":3,"sources":["C:/Users/Komputer/Desktop/Komputer/Projects/todo-app-demo/todo-app-demo/src/components/TodoItem.jsx"],"names":["React","useState","useEffect","TodoItem","props","todoItem","setTodoItem","data","isDirty","setDirty","fetch","id","method","headers","body","JSON","stringify","then","response","json","console","log","updateIsDone","isDone","task"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;;;;AAEA,MAAMC,QAAQ,GAAIC,KAAD,IAAW;AAAA;;AACxB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAACG,KAAK,CAACG,IAAP,CAAxC;AACA,QAAM,CAACC,OAAD,EAAUC,QAAV,IAAsBR,QAAQ,CAAC,KAAD,CAApC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGM,OAAH,EAAY;AACRE,MAAAA,KAAK,CAAE,uCAAsCL,QAAQ,CAACM,EAAG,EAApD,EAAuD;AACxDC,QAAAA,MAAM,EAAG,KAD+C;AAExDC,QAAAA,OAAO,EAAG;AACN,0BAAiB;AADX,SAF8C;AAKxDC,QAAAA,IAAI,EAAGC,IAAI,CAACC,SAAL,CAAeX,QAAf;AALiD,OAAvD,CAAL,CAOCY,IAPD,CAOMC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPlB,EAQCF,IARD,CAQMV,IAAI,IAAI;AACVE,QAAAA,QAAQ,CAAC,KAAD,CAAR;AACAH,QAAAA,WAAW,CAACC,IAAD,CAAX;AACH,OAXD;AAaAa,MAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiChB,QAAjC;AACH;AACJ,GAjBQ,EAiBN,CAACA,QAAD,EAAWG,OAAX,CAjBM,CAAT;;AAmBA,WAASc,YAAT,GAAwB;AACpBb,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAH,IAAAA,WAAW,CAAC,EAAC,GAAGD,QAAJ;AAAckB,MAAAA,MAAM,EAAE,CAAClB,QAAQ,CAACkB;AAAhC,KAAD,CAAX;AACH;;AAED,sBACI;AAAA,4BACE;AAAO,MAAA,IAAI,EAAC,UAAZ;AAAuB,MAAA,OAAO,EAAElB,QAAQ,CAACkB,MAAzC;AAAiD,MAAA,QAAQ,EAAED;AAA3D;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,gBAAOjB,QAAQ,CAACmB;AAAhB;AAAA;AAAA;AAAA;AAAA,YAFF,eAE8B;AAAA;AAAA;AAAA;AAAA,YAF9B;AAAA,kBADJ;AAMH,CAlCD;;GAAMrB,Q;;KAAAA,Q;AAoCN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nconst TodoItem = (props) => {\r\n    const [todoItem, setTodoItem] = useState(props.data);\r\n    const [isDirty, setDirty] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if(isDirty) {\r\n            fetch(`http://localhost:8080/api/todoItems/${todoItem.id}`, {\r\n                method : 'PUT',\r\n                headers : {\r\n                    'content-type' : 'application/json'\r\n                },\r\n                body : JSON.stringify(todoItem)\r\n            })\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                setDirty(false);\r\n                setTodoItem(data);\r\n            });\r\n\r\n            console.log(\"todo item changed\", todoItem);\r\n        }\r\n    }, [todoItem, isDirty]);\r\n\r\n    function updateIsDone() {\r\n        setDirty(true);\r\n        setTodoItem({...todoItem, isDone: !todoItem.isDone});\r\n    }\r\n\r\n    return (\r\n        <>\r\n          <input type=\"checkbox\" checked={todoItem.isDone} onChange={updateIsDone}/>\r\n          <span>{todoItem.task}</span><br></br>\r\n        </>\r\n      );\r\n};\r\n\r\nexport default TodoItem;"]},"metadata":{},"sourceType":"module"}